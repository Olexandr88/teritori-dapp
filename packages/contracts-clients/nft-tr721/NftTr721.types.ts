/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export type Addr = string;
export type Uint128 = string;
export interface InstantiateMsg {
  admin: string;
  launchpad_contract: string;
  mint_info: MintInfo;
  minter: string;
  name: string;
  symbol: string;
  whitelist_mint_infos: WhitelistMintInfo[];
  [k: string]: unknown;
}
export interface MintInfo {
  denom: string;
  limit_per_address: number;
  merkle_root: string;
  royalty_address?: Addr | null;
  royalty_percentage?: number | null;
  start_time: number;
  tokens_count: number;
  unit_price: Uint128;
}
export interface WhitelistMintInfo {
  addresses_count: number;
  denom: string;
  end_time: number;
  limit_per_address: number;
  merkle_root: string;
  start_time: number;
  unit_price: Uint128;
}
export type ExecuteMsg = {
  transfer_nft: {
    recipient: string;
    token_id: string;
    [k: string]: unknown;
  };
} | {
  send_nft: {
    contract: string;
    msg: Binary;
    token_id: string;
    [k: string]: unknown;
  };
} | {
  approve: {
    expires?: Expiration | null;
    spender: string;
    token_id: string;
    [k: string]: unknown;
  };
} | {
  approve_all: {
    expires?: Expiration | null;
    operator: string;
    [k: string]: unknown;
  };
} | {
  revoke: {
    spender: string;
    token_id: string;
    [k: string]: unknown;
  };
} | {
  revoke_all: {
    operator: string;
    [k: string]: unknown;
  };
} | {
  mint: {
    extension?: Metadata | null;
    owner: string;
    token_id: string;
    token_uri?: string | null;
    [k: string]: unknown;
  };
} | {
  update_mint_info: {
    mint_info: MintInfo;
    [k: string]: unknown;
  };
} | {
  update_whitelist_mint_info: {
    whitelist_id: number;
    whitelist_mint_info: WhitelistMintInfo;
    [k: string]: unknown;
  };
} | {
  request_mint: {
    whitelist_proof?: WhitelistProof | null;
    [k: string]: unknown;
  };
} | {
  claim: {
    merkle_proof: string;
    metadata: Metadata;
    token_id: string;
    [k: string]: unknown;
  };
};
export type Binary = string;
export type Expiration = {
  at_height: number;
} | {
  at_time: Timestamp;
} | {
  never: {};
};
export type Timestamp = Uint64;
export type Uint64 = number;
export interface Metadata {
  animation_url?: string | null;
  attributes?: Trait[] | null;
  background_color?: string | null;
  description?: string | null;
  external_url?: string | null;
  image?: string | null;
  image_data?: string | null;
  name?: string | null;
  royalty_payment_address?: string | null;
  royalty_percentage?: number | null;
  youtube_url?: string | null;
}
export interface Trait {
  display_type?: string | null;
  trait_type: string;
  value: string;
}
export interface WhitelistProof {
  address_indice: number;
  merkle_proof: string;
}
export type QueryMsg = {
  total_minted: {
    [k: string]: unknown;
  };
} | {
  minted_count_by_user: {
    user: string;
    [k: string]: unknown;
  };
} | {
  whitelist_minted_count_by_user: {
    period: number;
    user: string;
    [k: string]: unknown;
  };
} | {
  mint_info: {
    [k: string]: unknown;
  };
} | {
  whitelist_mint_infos: {
    [k: string]: unknown;
  };
} | {
  minter: {
    [k: string]: unknown;
  };
} | {
  contract_info: {
    [k: string]: unknown;
  };
} | {
  nft_info: {
    token_id: string;
    [k: string]: unknown;
  };
} | {
  owner_of: {
    include_expired?: boolean | null;
    token_id: string;
    [k: string]: unknown;
  };
} | {
  all_nft_info: {
    include_expired?: boolean | null;
    token_id: string;
    [k: string]: unknown;
  };
} | {
  operator: {
    include_expired?: boolean | null;
    operator: string;
    owner: string;
    [k: string]: unknown;
  };
} | {
  all_operators: {
    include_expired?: boolean | null;
    limit?: number | null;
    owner: string;
    start_after?: string | null;
    [k: string]: unknown;
  };
} | {
  num_tokens: {
    [k: string]: unknown;
  };
} | {
  tokens: {
    limit?: number | null;
    owner: string;
    start_after?: string | null;
    [k: string]: unknown;
  };
} | {
  all_tokens: {
    limit?: number | null;
    start_after?: string | null;
    [k: string]: unknown;
  };
} | {
  approval: {
    include_expired?: boolean | null;
    spender: string;
    token_id: string;
    [k: string]: unknown;
  };
} | {
  approvals: {
    include_expired?: boolean | null;
    token_id: string;
    [k: string]: unknown;
  };
} | {
  ownership: {
    [k: string]: unknown;
  };
} | {
  extension: {
    [k: string]: unknown;
  };
} | {
  contract_version: {
    [k: string]: unknown;
  };
} | {
  merkle_root: {
    [k: string]: unknown;
  };
} | {
  royalty_info: {
    sale_price: Uint128;
    token_id: string;
    [k: string]: unknown;
  };
} | {
  check_royalties: {
    [k: string]: unknown;
  };
};
export interface AllNftInfoResponseForNullable_Metadata {
  access: OwnerOfResponse;
  info: NftInfoResponseForNullable_Metadata;
}
export interface OwnerOfResponse {
  approvals: Approval[];
  owner: string;
}
export interface Approval {
  expires: Expiration;
  spender: string;
}
export interface NftInfoResponseForNullable_Metadata {
  extension?: Metadata | null;
  token_uri?: string | null;
}
export interface OperatorsResponse {
  operators: Approval[];
}
export interface TokensResponse {
  tokens: string[];
}
export interface ApprovalResponse {
  approval: Approval;
}
export interface ApprovalsResponse {
  approvals: Approval[];
}
export interface CheckRoyaltiesResponse {
  royalty_payments: boolean;
}
export interface ContractInfoResponse {
  name: string;
  symbol: string;
}
export interface ContractVersion {
  contract: string;
  version: string;
}
export type CosmosMsgForEmpty = {
  bank: BankMsg;
} | {
  custom: Empty;
} | {
  staking: StakingMsg;
} | {
  distribution: DistributionMsg;
} | {
  stargate: {
    type_url: string;
    value: Binary;
    [k: string]: unknown;
  };
} | {
  ibc: IbcMsg;
} | {
  wasm: WasmMsg;
} | {
  gov: GovMsg;
};
export type BankMsg = {
  send: {
    amount: Coin[];
    to_address: string;
    [k: string]: unknown;
  };
} | {
  burn: {
    amount: Coin[];
    [k: string]: unknown;
  };
};
export type StakingMsg = {
  delegate: {
    amount: Coin;
    validator: string;
    [k: string]: unknown;
  };
} | {
  undelegate: {
    amount: Coin;
    validator: string;
    [k: string]: unknown;
  };
} | {
  redelegate: {
    amount: Coin;
    dst_validator: string;
    src_validator: string;
    [k: string]: unknown;
  };
};
export type DistributionMsg = {
  set_withdraw_address: {
    address: string;
    [k: string]: unknown;
  };
} | {
  withdraw_delegator_reward: {
    validator: string;
    [k: string]: unknown;
  };
};
export type IbcMsg = {
  transfer: {
    amount: Coin;
    channel_id: string;
    timeout: IbcTimeout;
    to_address: string;
    [k: string]: unknown;
  };
} | {
  send_packet: {
    channel_id: string;
    data: Binary;
    timeout: IbcTimeout;
    [k: string]: unknown;
  };
} | {
  close_channel: {
    channel_id: string;
    [k: string]: unknown;
  };
};
export type WasmMsg = {
  execute: {
    contract_addr: string;
    funds: Coin[];
    msg: Binary;
    [k: string]: unknown;
  };
} | {
  instantiate: {
    admin?: string | null;
    code_id: number;
    funds: Coin[];
    label: string;
    msg: Binary;
    [k: string]: unknown;
  };
} | {
  instantiate2: {
    admin?: string | null;
    code_id: number;
    funds: Coin[];
    label: string;
    msg: Binary;
    salt: Binary;
    [k: string]: unknown;
  };
} | {
  migrate: {
    contract_addr: string;
    msg: Binary;
    new_code_id: number;
    [k: string]: unknown;
  };
} | {
  update_admin: {
    admin: string;
    contract_addr: string;
    [k: string]: unknown;
  };
} | {
  clear_admin: {
    contract_addr: string;
    [k: string]: unknown;
  };
};
export type GovMsg = {
  vote: {
    proposal_id: number;
    vote: VoteOption;
    [k: string]: unknown;
  };
} | {
  vote_weighted: {
    options: WeightedVoteOption[];
    proposal_id: number;
    [k: string]: unknown;
  };
};
export type VoteOption = "yes" | "no" | "abstain" | "no_with_veto";
export type Decimal = string;
export type ReplyOn = "always" | "error" | "success" | "never";
export interface ResponseForEmpty {
  attributes: Attribute[];
  data?: Binary | null;
  events: Event[];
  messages: SubMsgForEmpty[];
  [k: string]: unknown;
}
export interface Attribute {
  key: string;
  value: string;
  [k: string]: unknown;
}
export interface Event {
  attributes: Attribute[];
  type: string;
  [k: string]: unknown;
}
export interface SubMsgForEmpty {
  gas_limit?: number | null;
  id: number;
  msg: CosmosMsgForEmpty;
  reply_on: ReplyOn;
  [k: string]: unknown;
}
export interface Coin {
  amount: Uint128;
  denom: string;
  [k: string]: unknown;
}
export interface Empty {
  [k: string]: unknown;
}
export interface IbcTimeout {
  block?: IbcTimeoutBlock | null;
  timestamp?: Timestamp | null;
  [k: string]: unknown;
}
export interface IbcTimeoutBlock {
  height: number;
  revision: number;
  [k: string]: unknown;
}
export interface WeightedVoteOption {
  option: VoteOption;
  weight: Decimal;
  [k: string]: unknown;
}
export type String = string;
export type Uint32 = number;
export interface MinterResponse {
  minter?: string | null;
}
export interface NumTokensResponse {
  count: number;
}
export interface OperatorResponse {
  approval: Approval;
}
export interface OwnershipForAddr {
  owner?: Addr | null;
  pending_expiry?: Expiration | null;
  pending_owner?: Addr | null;
}
export interface RoyaltiesInfoResponse {
  address: string;
  royalty_amount: Uint128;
}
export type ArrayOfWhitelistMintInfo = WhitelistMintInfo[];