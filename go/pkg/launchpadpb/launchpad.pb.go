// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: launchpad/v1/launchpad.proto

package launchpadpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CalculateMerkleRootRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User      string      `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	ProjectId uint32      `protobuf:"varint,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	NetworkId string      `protobuf:"bytes,3,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	Metadatas []*Metadata `protobuf:"bytes,4,rep,name=metadatas,proto3" json:"metadatas,omitempty"`
}

func (x *CalculateMerkleRootRequest) Reset() {
	*x = CalculateMerkleRootRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launchpad_v1_launchpad_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculateMerkleRootRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateMerkleRootRequest) ProtoMessage() {}

func (x *CalculateMerkleRootRequest) ProtoReflect() protoreflect.Message {
	mi := &file_launchpad_v1_launchpad_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateMerkleRootRequest.ProtoReflect.Descriptor instead.
func (*CalculateMerkleRootRequest) Descriptor() ([]byte, []int) {
	return file_launchpad_v1_launchpad_proto_rawDescGZIP(), []int{0}
}

func (x *CalculateMerkleRootRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *CalculateMerkleRootRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *CalculateMerkleRootRequest) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *CalculateMerkleRootRequest) GetMetadatas() []*Metadata {
	if x != nil {
		return x.Metadatas
	}
	return nil
}

type CalculateMerkleRootResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerkleRoot string `protobuf:"bytes,1,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"`
}

func (x *CalculateMerkleRootResponse) Reset() {
	*x = CalculateMerkleRootResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launchpad_v1_launchpad_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculateMerkleRootResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateMerkleRootResponse) ProtoMessage() {}

func (x *CalculateMerkleRootResponse) ProtoReflect() protoreflect.Message {
	mi := &file_launchpad_v1_launchpad_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateMerkleRootResponse.ProtoReflect.Descriptor instead.
func (*CalculateMerkleRootResponse) Descriptor() ([]byte, []int) {
	return file_launchpad_v1_launchpad_proto_rawDescGZIP(), []int{1}
}

func (x *CalculateMerkleRootResponse) GetMerkleRoot() string {
	if x != nil {
		return x.MerkleRoot
	}
	return ""
}

type UploadMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User      string      `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	ProjectId uint32      `protobuf:"varint,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	NetworkId string      `protobuf:"bytes,3,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	Metadatas []*Metadata `protobuf:"bytes,4,rep,name=metadatas,proto3" json:"metadatas,omitempty"`
}

func (x *UploadMetadataRequest) Reset() {
	*x = UploadMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launchpad_v1_launchpad_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadMetadataRequest) ProtoMessage() {}

func (x *UploadMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_launchpad_v1_launchpad_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadMetadataRequest.ProtoReflect.Descriptor instead.
func (*UploadMetadataRequest) Descriptor() ([]byte, []int) {
	return file_launchpad_v1_launchpad_proto_rawDescGZIP(), []int{2}
}

func (x *UploadMetadataRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *UploadMetadataRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *UploadMetadataRequest) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *UploadMetadataRequest) GetMetadatas() []*Metadata {
	if x != nil {
		return x.Metadatas
	}
	return nil
}

type UploadMetadataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerkleRoot string `protobuf:"bytes,1,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"`
}

func (x *UploadMetadataResponse) Reset() {
	*x = UploadMetadataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launchpad_v1_launchpad_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadMetadataResponse) ProtoMessage() {}

func (x *UploadMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_launchpad_v1_launchpad_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadMetadataResponse.ProtoReflect.Descriptor instead.
func (*UploadMetadataResponse) Descriptor() ([]byte, []int) {
	return file_launchpad_v1_launchpad_proto_rawDescGZIP(), []int{3}
}

func (x *UploadMetadataResponse) GetMerkleRoot() string {
	if x != nil {
		return x.MerkleRoot
	}
	return ""
}

type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image                 *string  `protobuf:"bytes,1,opt,name=image,proto3,oneof" json:"image,omitempty"`
	ImageData             *string  `protobuf:"bytes,2,opt,name=image_data,json=imageData,proto3,oneof" json:"image_data,omitempty"`
	ExternalUrl           *string  `protobuf:"bytes,3,opt,name=external_url,json=externalUrl,proto3,oneof" json:"external_url,omitempty"`
	Description           *string  `protobuf:"bytes,4,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Name                  *string  `protobuf:"bytes,5,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Attributes            []*Trait `protobuf:"bytes,6,rep,name=attributes,proto3" json:"attributes,omitempty"`
	BackgroundColor       *string  `protobuf:"bytes,7,opt,name=background_color,json=backgroundColor,proto3,oneof" json:"background_color,omitempty"`
	AnimationUrl          *string  `protobuf:"bytes,8,opt,name=animation_url,json=animationUrl,proto3,oneof" json:"animation_url,omitempty"`
	YoutubeUrl            *string  `protobuf:"bytes,9,opt,name=youtube_url,json=youtubeUrl,proto3,oneof" json:"youtube_url,omitempty"`
	RoyaltyPercentage     *uint64  `protobuf:"varint,10,opt,name=royalty_percentage,json=royaltyPercentage,proto3,oneof" json:"royalty_percentage,omitempty"`
	RoyaltyPaymentAddress *string  `protobuf:"bytes,11,opt,name=royalty_payment_address,json=royaltyPaymentAddress,proto3,oneof" json:"royalty_payment_address,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launchpad_v1_launchpad_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_launchpad_v1_launchpad_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_launchpad_v1_launchpad_proto_rawDescGZIP(), []int{4}
}

func (x *Metadata) GetImage() string {
	if x != nil && x.Image != nil {
		return *x.Image
	}
	return ""
}

func (x *Metadata) GetImageData() string {
	if x != nil && x.ImageData != nil {
		return *x.ImageData
	}
	return ""
}

func (x *Metadata) GetExternalUrl() string {
	if x != nil && x.ExternalUrl != nil {
		return *x.ExternalUrl
	}
	return ""
}

func (x *Metadata) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Metadata) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Metadata) GetAttributes() []*Trait {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Metadata) GetBackgroundColor() string {
	if x != nil && x.BackgroundColor != nil {
		return *x.BackgroundColor
	}
	return ""
}

func (x *Metadata) GetAnimationUrl() string {
	if x != nil && x.AnimationUrl != nil {
		return *x.AnimationUrl
	}
	return ""
}

func (x *Metadata) GetYoutubeUrl() string {
	if x != nil && x.YoutubeUrl != nil {
		return *x.YoutubeUrl
	}
	return ""
}

func (x *Metadata) GetRoyaltyPercentage() uint64 {
	if x != nil && x.RoyaltyPercentage != nil {
		return *x.RoyaltyPercentage
	}
	return 0
}

func (x *Metadata) GetRoyaltyPaymentAddress() string {
	if x != nil && x.RoyaltyPaymentAddress != nil {
		return *x.RoyaltyPaymentAddress
	}
	return ""
}

type Trait struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayType *string `protobuf:"bytes,1,opt,name=display_type,json=displayType,proto3,oneof" json:"display_type,omitempty"`
	TraitType   string  `protobuf:"bytes,2,opt,name=trait_type,json=traitType,proto3" json:"trait_type,omitempty"`
	Value       string  `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Trait) Reset() {
	*x = Trait{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launchpad_v1_launchpad_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trait) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trait) ProtoMessage() {}

func (x *Trait) ProtoReflect() protoreflect.Message {
	mi := &file_launchpad_v1_launchpad_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trait.ProtoReflect.Descriptor instead.
func (*Trait) Descriptor() ([]byte, []int) {
	return file_launchpad_v1_launchpad_proto_rawDescGZIP(), []int{5}
}

func (x *Trait) GetDisplayType() string {
	if x != nil && x.DisplayType != nil {
		return *x.DisplayType
	}
	return ""
}

func (x *Trait) GetTraitType() string {
	if x != nil {
		return x.TraitType
	}
	return ""
}

func (x *Trait) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Collection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Collection info ----------------------------
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Desc          string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	Symbol        string `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	CoverImgUri   string `protobuf:"bytes,4,opt,name=cover_img_uri,json=coverImgUri,proto3" json:"cover_img_uri,omitempty"`
	TargetNetwork string `protobuf:"bytes,5,opt,name=target_network,json=targetNetwork,proto3" json:"target_network,omitempty"`
	ExternalLink  string `protobuf:"bytes,6,opt,name=external_link,json=externalLink,proto3" json:"external_link,omitempty"`
	// Collection details ----------------------------
	WebsiteLink           string `protobuf:"bytes,7,opt,name=website_link,json=websiteLink,proto3" json:"website_link,omitempty"`
	TwitterProfile        string `protobuf:"bytes,8,opt,name=twitter_profile,json=twitterProfile,proto3" json:"twitter_profile,omitempty"`
	TwitterFollowersCount uint64 `protobuf:"varint,9,opt,name=twitter_followers_count,json=twitterFollowersCount,proto3" json:"twitter_followers_count,omitempty"`
	ContactDiscordName    string `protobuf:"bytes,10,opt,name=contact_discord_name,json=contactDiscordName,proto3" json:"contact_discord_name,omitempty"`
	ContactEmail          string `protobuf:"bytes,11,opt,name=contact_email,json=contactEmail,proto3" json:"contact_email,omitempty"`
	IsProjectDerivative   bool   `protobuf:"varint,12,opt,name=is_project_derivative,json=isProjectDerivative,proto3" json:"is_project_derivative,omitempty"`
	ProjectType           string `protobuf:"bytes,13,opt,name=project_type,json=projectType,proto3" json:"project_type,omitempty"`
	ProjectDesc           string `protobuf:"bytes,14,opt,name=project_desc,json=projectDesc,proto3" json:"project_desc,omitempty"`
	IsAppliedPreviously   bool   `protobuf:"varint,15,opt,name=is_applied_previously,json=isAppliedPreviously,proto3" json:"is_applied_previously,omitempty"`
	// Team info --------------------------------------
	TeamDesc       string `protobuf:"bytes,16,opt,name=team_desc,json=teamDesc,proto3" json:"team_desc,omitempty"`
	TeamLink       string `protobuf:"bytes,17,opt,name=team_link,json=teamLink,proto3" json:"team_link,omitempty"`
	Partners       string `protobuf:"bytes,18,opt,name=partners,proto3" json:"partners,omitempty"`
	InvestedAmount uint64 `protobuf:"varint,19,opt,name=invested_amount,json=investedAmount,proto3" json:"invested_amount,omitempty"`
	InvestmentLink string `protobuf:"bytes,20,opt,name=investment_link,json=investmentLink,proto3" json:"investment_link,omitempty"`
	WhitepaperLink string `protobuf:"bytes,21,opt,name=whitepaper_link,json=whitepaperLink,proto3" json:"whitepaper_link,omitempty"`
	RoadmapLink    string `protobuf:"bytes,22,opt,name=roadmap_link,json=roadmapLink,proto3" json:"roadmap_link,omitempty"`
	// Additional info ----------------------------
	ArtworkDesc              string `protobuf:"bytes,23,opt,name=artwork_desc,json=artworkDesc,proto3" json:"artwork_desc,omitempty"`
	IsReadyForMint           bool   `protobuf:"varint,24,opt,name=is_ready_for_mint,json=isReadyForMint,proto3" json:"is_ready_for_mint,omitempty"`
	ExpectedSupply           uint32 `protobuf:"varint,25,opt,name=expected_supply,json=expectedSupply,proto3" json:"expected_supply,omitempty"`
	ExpectedPublicMintPrice  uint64 `protobuf:"varint,26,opt,name=expected_public_mint_price,json=expectedPublicMintPrice,proto3" json:"expected_public_mint_price,omitempty"`
	ExpectedMintDate         uint64 `protobuf:"varint,27,opt,name=expected_mint_date,json=expectedMintDate,proto3" json:"expected_mint_date,omitempty"`
	EscrowMintProceedsPeriod uint64 `protobuf:"varint,28,opt,name=escrow_mint_proceeds_period,json=escrowMintProceedsPeriod,proto3" json:"escrow_mint_proceeds_period,omitempty"`
	DoxState                 string `protobuf:"bytes,29,opt,name=dox_state,json=doxState,proto3" json:"dox_state,omitempty"`
	DaoWhitelistCount        uint32 `protobuf:"varint,30,opt,name=dao_whitelist_count,json=daoWhitelistCount,proto3" json:"dao_whitelist_count,omitempty"`
	// Minting details ----------------------------
	TokensCount     uint32 `protobuf:"varint,31,opt,name=tokens_count,json=tokensCount,proto3" json:"tokens_count,omitempty"`
	UnitPrice       uint64 `protobuf:"varint,32,opt,name=unit_price,json=unitPrice,proto3" json:"unit_price,omitempty"`
	LimitPerAddress uint32 `protobuf:"varint,33,opt,name=limit_per_address,json=limitPerAddress,proto3" json:"limit_per_address,omitempty"`
	StartTime       uint64 `protobuf:"varint,34,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Whitelist minting --------------------------
	WhitelistAddresses       []string `protobuf:"bytes,35,rep,name=whitelist_addresses,json=whitelistAddresses,proto3" json:"whitelist_addresses,omitempty"`
	WhitelistUnitPrice       uint64   `protobuf:"varint,36,opt,name=whitelist_unit_price,json=whitelistUnitPrice,proto3" json:"whitelist_unit_price,omitempty"`
	WhitelistLimitPerAddress string   `protobuf:"bytes,37,opt,name=whitelist_limit_per_address,json=whitelistLimitPerAddress,proto3" json:"whitelist_limit_per_address,omitempty"`
	WhitelistMemberLimit     uint32   `protobuf:"varint,38,opt,name=whitelist_member_limit,json=whitelistMemberLimit,proto3" json:"whitelist_member_limit,omitempty"`
	WhitelistStartTime       uint64   `protobuf:"varint,39,opt,name=whitelist_start_time,json=whitelistStartTime,proto3" json:"whitelist_start_time,omitempty"`
	WhitelistEndTime         uint64   `protobuf:"varint,40,opt,name=whitelist_end_time,json=whitelistEndTime,proto3" json:"whitelist_end_time,omitempty"`
	// Royalty --------------------------
	RoyaltyAddress    string `protobuf:"bytes,41,opt,name=royalty_address,json=royaltyAddress,proto3" json:"royalty_address,omitempty"`
	RoyaltyPercentage uint32 `protobuf:"varint,42,opt,name=royalty_percentage,json=royaltyPercentage,proto3" json:"royalty_percentage,omitempty"`
	// Extend info --------------------------
	BaseTokenUri    string `protobuf:"bytes,43,opt,name=base_token_uri,json=baseTokenUri,proto3" json:"base_token_uri,omitempty"`
	MerkleRoot      string `protobuf:"bytes,44,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"`
	DeployedAddress string `protobuf:"bytes,45,opt,name=deployed_address,json=deployedAddress,proto3" json:"deployed_address,omitempty"`
}

func (x *Collection) Reset() {
	*x = Collection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launchpad_v1_launchpad_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Collection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collection) ProtoMessage() {}

func (x *Collection) ProtoReflect() protoreflect.Message {
	mi := &file_launchpad_v1_launchpad_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collection.ProtoReflect.Descriptor instead.
func (*Collection) Descriptor() ([]byte, []int) {
	return file_launchpad_v1_launchpad_proto_rawDescGZIP(), []int{6}
}

func (x *Collection) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Collection) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *Collection) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Collection) GetCoverImgUri() string {
	if x != nil {
		return x.CoverImgUri
	}
	return ""
}

func (x *Collection) GetTargetNetwork() string {
	if x != nil {
		return x.TargetNetwork
	}
	return ""
}

func (x *Collection) GetExternalLink() string {
	if x != nil {
		return x.ExternalLink
	}
	return ""
}

func (x *Collection) GetWebsiteLink() string {
	if x != nil {
		return x.WebsiteLink
	}
	return ""
}

func (x *Collection) GetTwitterProfile() string {
	if x != nil {
		return x.TwitterProfile
	}
	return ""
}

func (x *Collection) GetTwitterFollowersCount() uint64 {
	if x != nil {
		return x.TwitterFollowersCount
	}
	return 0
}

func (x *Collection) GetContactDiscordName() string {
	if x != nil {
		return x.ContactDiscordName
	}
	return ""
}

func (x *Collection) GetContactEmail() string {
	if x != nil {
		return x.ContactEmail
	}
	return ""
}

func (x *Collection) GetIsProjectDerivative() bool {
	if x != nil {
		return x.IsProjectDerivative
	}
	return false
}

func (x *Collection) GetProjectType() string {
	if x != nil {
		return x.ProjectType
	}
	return ""
}

func (x *Collection) GetProjectDesc() string {
	if x != nil {
		return x.ProjectDesc
	}
	return ""
}

func (x *Collection) GetIsAppliedPreviously() bool {
	if x != nil {
		return x.IsAppliedPreviously
	}
	return false
}

func (x *Collection) GetTeamDesc() string {
	if x != nil {
		return x.TeamDesc
	}
	return ""
}

func (x *Collection) GetTeamLink() string {
	if x != nil {
		return x.TeamLink
	}
	return ""
}

func (x *Collection) GetPartners() string {
	if x != nil {
		return x.Partners
	}
	return ""
}

func (x *Collection) GetInvestedAmount() uint64 {
	if x != nil {
		return x.InvestedAmount
	}
	return 0
}

func (x *Collection) GetInvestmentLink() string {
	if x != nil {
		return x.InvestmentLink
	}
	return ""
}

func (x *Collection) GetWhitepaperLink() string {
	if x != nil {
		return x.WhitepaperLink
	}
	return ""
}

func (x *Collection) GetRoadmapLink() string {
	if x != nil {
		return x.RoadmapLink
	}
	return ""
}

func (x *Collection) GetArtworkDesc() string {
	if x != nil {
		return x.ArtworkDesc
	}
	return ""
}

func (x *Collection) GetIsReadyForMint() bool {
	if x != nil {
		return x.IsReadyForMint
	}
	return false
}

func (x *Collection) GetExpectedSupply() uint32 {
	if x != nil {
		return x.ExpectedSupply
	}
	return 0
}

func (x *Collection) GetExpectedPublicMintPrice() uint64 {
	if x != nil {
		return x.ExpectedPublicMintPrice
	}
	return 0
}

func (x *Collection) GetExpectedMintDate() uint64 {
	if x != nil {
		return x.ExpectedMintDate
	}
	return 0
}

func (x *Collection) GetEscrowMintProceedsPeriod() uint64 {
	if x != nil {
		return x.EscrowMintProceedsPeriod
	}
	return 0
}

func (x *Collection) GetDoxState() string {
	if x != nil {
		return x.DoxState
	}
	return ""
}

func (x *Collection) GetDaoWhitelistCount() uint32 {
	if x != nil {
		return x.DaoWhitelistCount
	}
	return 0
}

func (x *Collection) GetTokensCount() uint32 {
	if x != nil {
		return x.TokensCount
	}
	return 0
}

func (x *Collection) GetUnitPrice() uint64 {
	if x != nil {
		return x.UnitPrice
	}
	return 0
}

func (x *Collection) GetLimitPerAddress() uint32 {
	if x != nil {
		return x.LimitPerAddress
	}
	return 0
}

func (x *Collection) GetStartTime() uint64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Collection) GetWhitelistAddresses() []string {
	if x != nil {
		return x.WhitelistAddresses
	}
	return nil
}

func (x *Collection) GetWhitelistUnitPrice() uint64 {
	if x != nil {
		return x.WhitelistUnitPrice
	}
	return 0
}

func (x *Collection) GetWhitelistLimitPerAddress() string {
	if x != nil {
		return x.WhitelistLimitPerAddress
	}
	return ""
}

func (x *Collection) GetWhitelistMemberLimit() uint32 {
	if x != nil {
		return x.WhitelistMemberLimit
	}
	return 0
}

func (x *Collection) GetWhitelistStartTime() uint64 {
	if x != nil {
		return x.WhitelistStartTime
	}
	return 0
}

func (x *Collection) GetWhitelistEndTime() uint64 {
	if x != nil {
		return x.WhitelistEndTime
	}
	return 0
}

func (x *Collection) GetRoyaltyAddress() string {
	if x != nil {
		return x.RoyaltyAddress
	}
	return ""
}

func (x *Collection) GetRoyaltyPercentage() uint32 {
	if x != nil {
		return x.RoyaltyPercentage
	}
	return 0
}

func (x *Collection) GetBaseTokenUri() string {
	if x != nil {
		return x.BaseTokenUri
	}
	return ""
}

func (x *Collection) GetMerkleRoot() string {
	if x != nil {
		return x.MerkleRoot
	}
	return ""
}

func (x *Collection) GetDeployedAddress() string {
	if x != nil {
		return x.DeployedAddress
	}
	return ""
}

var File_launchpad_v1_launchpad_proto protoreflect.FileDescriptor

var file_launchpad_v1_launchpad_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x70, 0x61, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x6c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x70, 0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c,
	0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x70, 0x61, 0x64, 0x2e, 0x76, 0x31, 0x22, 0xa4, 0x01, 0x0a,
	0x1a, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65,
	0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x34, 0x0a,
	0x09, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x70, 0x61, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x22, 0x3e, 0x0a, 0x1b, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x6f,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52,
	0x6f, 0x6f, 0x74, 0x22, 0x9f, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12,
	0x34, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x70, 0x61, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x09, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0x39, 0x0a, 0x16, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74,
	0x22, 0x84, 0x05, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x72,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x70, 0x61, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x74, 0x52, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x10, 0x62, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x61, 0x6e, 0x69,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x06, 0x52, 0x0c, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0a, 0x79, 0x6f, 0x75, 0x74,
	0x75, 0x62, 0x65, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x12, 0x72, 0x6f, 0x79,
	0x61, 0x6c, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x04, 0x48, 0x08, 0x52, 0x11, 0x72, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a,
	0x17, 0x72, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09,
	0x52, 0x15, 0x72, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65,
	0x5f, 0x75, 0x72, 0x6c, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x42, 0x1a, 0x0a, 0x18, 0x5f,
	0x72, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x75, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x69, 0x74,
	0x12, 0x26, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x69,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xb6,
	0x0e, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x22, 0x0a,
	0x0d, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x67, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x67, 0x55, 0x72,
	0x69, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x21, 0x0a,
	0x0c, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b,
	0x12, 0x27, 0x0a, 0x0f, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x77, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x74, 0x77, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x74, 0x77, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x73, 0x5f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65,
	0x73, 0x63, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x6c, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x13, 0x69, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x6f, 0x75, 0x73, 0x6c, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x44,
	0x65, 0x73, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x6b,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x0f,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x27,
	0x0a, 0x0f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x70, 0x61, 0x70, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x77, 0x68, 0x69, 0x74, 0x65, 0x70, 0x61,
	0x70, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x61, 0x64, 0x6d,
	0x61, 0x70, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72,
	0x6f, 0x61, 0x64, 0x6d, 0x61, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x72,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x12, 0x29, 0x0a,
	0x11, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6d, 0x69,
	0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64,
	0x79, 0x46, 0x6f, 0x72, 0x4d, 0x69, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x75, 0x70, 0x70, 0x6c,
	0x79, 0x12, 0x3b, 0x0a, 0x1a, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4d, 0x69, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x4d, 0x69, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x1b,
	0x65, 0x73, 0x63, 0x72, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x65, 0x64, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x18, 0x65, 0x73, 0x63, 0x72, 0x6f, 0x77, 0x4d, 0x69, 0x6e, 0x74, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x65, 0x64, 0x73, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x6f, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x6f, 0x78, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x61, 0x6f, 0x5f,
	0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x64, 0x61, 0x6f, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x75, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x23, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x12, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x55,
	0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x77, 0x68, 0x69, 0x74,
	0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x77,
	0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x77, 0x68, 0x69, 0x74, 0x65,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69,
	0x73, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x30, 0x0a,
	0x14, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x77, 0x68, 0x69,
	0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x77, 0x68, 0x69,
	0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x72, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x6f, 0x79, 0x61, 0x6c, 0x74,
	0x79, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x72, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62,
	0x61, 0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x72, 0x69, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x29, 0x0a, 0x10,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0xdb, 0x01, 0x0a, 0x10, 0x4c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x70, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5b, 0x0a, 0x0e,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x23,
	0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x70, 0x61, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x70, 0x61, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x13, 0x43, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74,
	0x12, 0x28, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x70, 0x61, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52,
	0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x70, 0x61, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0f, 0x5a, 0x0d, 0x2e, 0x2f, 0x6c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x70, 0x61, 0x64, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_launchpad_v1_launchpad_proto_rawDescOnce sync.Once
	file_launchpad_v1_launchpad_proto_rawDescData = file_launchpad_v1_launchpad_proto_rawDesc
)

func file_launchpad_v1_launchpad_proto_rawDescGZIP() []byte {
	file_launchpad_v1_launchpad_proto_rawDescOnce.Do(func() {
		file_launchpad_v1_launchpad_proto_rawDescData = protoimpl.X.CompressGZIP(file_launchpad_v1_launchpad_proto_rawDescData)
	})
	return file_launchpad_v1_launchpad_proto_rawDescData
}

var file_launchpad_v1_launchpad_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_launchpad_v1_launchpad_proto_goTypes = []interface{}{
	(*CalculateMerkleRootRequest)(nil),  // 0: launchpad.v1.CalculateMerkleRootRequest
	(*CalculateMerkleRootResponse)(nil), // 1: launchpad.v1.CalculateMerkleRootResponse
	(*UploadMetadataRequest)(nil),       // 2: launchpad.v1.UploadMetadataRequest
	(*UploadMetadataResponse)(nil),      // 3: launchpad.v1.UploadMetadataResponse
	(*Metadata)(nil),                    // 4: launchpad.v1.Metadata
	(*Trait)(nil),                       // 5: launchpad.v1.Trait
	(*Collection)(nil),                  // 6: launchpad.v1.Collection
}
var file_launchpad_v1_launchpad_proto_depIdxs = []int32{
	4, // 0: launchpad.v1.CalculateMerkleRootRequest.metadatas:type_name -> launchpad.v1.Metadata
	4, // 1: launchpad.v1.UploadMetadataRequest.metadatas:type_name -> launchpad.v1.Metadata
	5, // 2: launchpad.v1.Metadata.attributes:type_name -> launchpad.v1.Trait
	2, // 3: launchpad.v1.LaunchpadService.UploadMetadata:input_type -> launchpad.v1.UploadMetadataRequest
	0, // 4: launchpad.v1.LaunchpadService.CalculateMerkleRoot:input_type -> launchpad.v1.CalculateMerkleRootRequest
	3, // 5: launchpad.v1.LaunchpadService.UploadMetadata:output_type -> launchpad.v1.UploadMetadataResponse
	1, // 6: launchpad.v1.LaunchpadService.CalculateMerkleRoot:output_type -> launchpad.v1.CalculateMerkleRootResponse
	5, // [5:7] is the sub-list for method output_type
	3, // [3:5] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_launchpad_v1_launchpad_proto_init() }
func file_launchpad_v1_launchpad_proto_init() {
	if File_launchpad_v1_launchpad_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_launchpad_v1_launchpad_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculateMerkleRootRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launchpad_v1_launchpad_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculateMerkleRootResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launchpad_v1_launchpad_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launchpad_v1_launchpad_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadMetadataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launchpad_v1_launchpad_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launchpad_v1_launchpad_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trait); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launchpad_v1_launchpad_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Collection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_launchpad_v1_launchpad_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_launchpad_v1_launchpad_proto_msgTypes[5].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_launchpad_v1_launchpad_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_launchpad_v1_launchpad_proto_goTypes,
		DependencyIndexes: file_launchpad_v1_launchpad_proto_depIdxs,
		MessageInfos:      file_launchpad_v1_launchpad_proto_msgTypes,
	}.Build()
	File_launchpad_v1_launchpad_proto = out.File
	file_launchpad_v1_launchpad_proto_rawDesc = nil
	file_launchpad_v1_launchpad_proto_goTypes = nil
	file_launchpad_v1_launchpad_proto_depIdxs = nil
}
