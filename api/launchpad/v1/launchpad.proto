syntax = "proto3";

package launchpad.v1;
option go_package = "./launchpadpb";

service LaunchpadService {
  rpc UploadMetadatas(UploadMetadatasRequest) returns (UploadMetadatasResponse);
  rpc CalculateCollectionMerkleRoot(CalculateCollectionMerkleRootRequest) returns (CalculateCollectionMerkleRootResponse);
  rpc TokenMetadata(TokenMetadataRequest) returns (TokenMetadataResponse);
  // rpc CollectionsByCreator(CollectionsByCreatorRequest) returns (CollectionsByCreatorResponse);
  rpc LaunchpadProjectsByCreator(LaunchpadProjectsByCreatorRequest) returns (LaunchpadProjectsByCreatorResponse);
  rpc LaunchpadProjects(LaunchpadProjectsRequest) returns (LaunchpadProjectsResponse);
  rpc LaunchpadProjectById(LaunchpadProjectByIdRequest) returns (LaunchpadProjectByIdResponse);
  rpc LaunchpadProjectsCount(LaunchpadProjectsCountRequest) returns (LaunchpadProjectsCountResponse);
}

enum Sort {
  SORT_UNSPECIFIED = 0;
  SORT_COLLECTION_NAME = 1;
}

enum SortDirection {
  SORT_DIRECTION_UNSPECIFIED = 0;
  SORT_DIRECTION_ASCENDING = 1;
  SORT_DIRECTION_DESCENDING = 2;
}

enum Status {
  STATUS_UNSPECIFIED = 0;
  STATUS_INCOMPLETE = 1;
  STATUS_COMPLETE = 2;
  STATUS_CONFIRMED = 3;
  STATUS_DEPLOYED = 4;
}

// -------------------------------

// message CollectionsByCreatorRequest {
//   string creator_id = 1;
//   string network_id = 2;
//   int32 limit = 3;
//   int32 offset = 4;
//   Sort sort = 5;
//   SortDirection sort_direction = 6;
//   optional Status status = 7;
// }

// message CollectionsByCreatorResponse {
//   repeated string collections = 1;
// }

message LaunchpadProjectsByCreatorRequest {
  string creator_id = 1;
  string network_id = 2;
  int32 limit = 3;
  int32 offset = 4;
  Sort sort = 5;
  SortDirection sort_direction = 6;
  //  TODO: user authentication (Member of the admin DAO) using a token
  string user_address = 7;
  optional Status status = 8;
}

message LaunchpadProjectsByCreatorResponse {
  repeated LaunchpadProject projects = 1;
}

message LaunchpadProjectsRequest {
  string network_id = 1;
  int32 limit = 2;
  int32 offset = 3;
  Sort sort = 4;
  SortDirection sort_direction = 5;
  //  TODO: user authentication (Member of the admin DAO) using a token
  string user_address = 6;
  optional Status status = 7;
}

message LaunchpadProjectsResponse {
  repeated LaunchpadProject projects = 1;
}

message LaunchpadProjectByIdRequest {
  string network_id = 1;
  string project_id = 2;
  //  TODO: user authentication (Member of the admin DAO) using a token
  string user_address = 3;
}

message LaunchpadProjectByIdResponse {
  LaunchpadProject project = 1;
}

message UploadMetadatasRequest {
  string sender = 1;
  string network_id = 2;
  string project_id = 3;
  repeated Metadata metadatas = 4;
  optional string pinata_jwt = 5;
}

message UploadMetadatasResponse {
  string merkle_root = 1;
}

message CalculateCollectionMerkleRootRequest {
  string sender = 1;
  repeated Metadata metadatas = 2;
}

message CalculateCollectionMerkleRootResponse {
  string merkle_root = 1;
}

message TokenMetadataRequest {
  string sender = 1;
  string network_id = 2;
  string project_id = 3;
  uint32 token_id = 4;
}

message TokenMetadataResponse {
  string merkle_root = 1;
  Metadata metadata = 2;
  repeated string merkle_proof = 3;
}

message LaunchpadProjectsCountRequest {
  //  TODO: user authentication (Member of the admin DAO) using a token
  string user_address = 1;
  string network_id = 2;
  optional Status status = 3;
}

message LaunchpadProjectsCountResponse {
  uint32 count = 1;
}

// -------------------------------

message LaunchpadProject {
  string id = 1;
  string network_id = 2;
  string creator_id = 3;
  string collection_data = 4;
  optional string merkle_root = 5;
  optional string deployed_address = 6;
}

message Metadata {
  optional string image = 1;
  optional string image_data = 2;
  optional string external_url = 3;
  optional string description = 4;
  optional string name = 5;
  repeated Trait attributes = 6;
  optional string background_color = 7;
  optional string animation_url = 8;
  optional string youtube_url = 9;
  optional uint64 royalty_percentage = 10;
  optional string royalty_payment_address = 11;
}

message Trait {
  optional string display_type = 1;
  string trait_type = 2;
  string value = 3;
}

// message UpdateCollectionWhitelistsRequest {
//   string sender = 1;
//   string network_id = 2;
//   uint32 project_id = 3;
//   repeated WhitelistMintInfo whitelist_mint_infos = 4;
// }

// message UpdateCollectionWhitelistsResponse {
//   repeated string merkle_roots = 1;
// }

// message WhitelistedAddressMerkleInfoRequest {
//   string sender = 1;
//   string network_id = 2;
//   uint32 project_id = 3;
//   uint32 whitelist_id = 4;
//   string address = 5;
// }

// message WhitelistedAddressMerkleInfoResponse {
//   string merkle_root = 1;
//   repeated string merkle_proof = 2;
// }

// message ProjectInfo {
//   // Collection info ----------------------------
//   string name = 1;
//   string desc = 2;
//   string symbol = 3;
//   string cover_img_uri = 4;
//   string target_network = 5;
//   string external_link = 6;

//   // Collection details ----------------------------
//   string website_link = 7;

//   string twitter_profile = 8;
//   uint64 twitter_followers_count = 9;

//   string contact_discord_name = 10;
//   string contact_email = 11;

//   bool is_project_derivative = 12;

//   string project_type = 13;
//   string project_desc = 14;

//   bool is_applied_previously = 15;

//   // Team info --------------------------------------
//   string team_desc = 16;
//   string team_link = 17;

//   string partners = 18;

//   string investment_desc = 19;
//   string investment_link = 20;

//   string whitepaper_link = 21;
//   string roadmap_link = 22;

//   // Additional info ----------------------------
//   string artwork_desc = 23;

//   bool is_ready_for_mint = 24;

//   uint32 expected_supply = 25;
//   uint64 expected_public_mint_price = 26;
//   uint64 expected_mint_date = 27;

//   uint64 escrow_mint_proceeds_period = 28;
//   bool is_dox = 29;

//   uint32 dao_whitelist_count = 30;

//   // Minting details ----------------------------
//   uint32 tokens_count = 31;
//   uint64 unit_price = 32;
//   uint32 limit_per_address = 33;
//   uint64 start_time = 34;

//   // Whitelist minting --------------------------
//   // repeated WhitelistMinting whitelist_mintings = 35;

//   // Royalty --------------------------
//   string royalty_address = 35;
//   uint32 royalty_percentage = 36;

//   // Extend info --------------------------
//   string base_token_uri = 37;
//   string merkle_root = 38;
//   string deployed_address = 39;
// }

// message WhitelistMintInfo {
//   repeated string addresses = 1;
//   uint64 unit_price = 2;
//   string denom = 3;
//   uint32 limit_per_address = 4;
//   uint32 addresses_count = 5;
//   uint64 start_time = 6;
//   uint64 end_time = 7;
// }



